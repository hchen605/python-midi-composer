import random as rand
import numpy as np
#import pandas as pd

def gen_next_note(note, mode):
    
    

    size = 12
    #C_trans = [3282,1,2661,13,2303,180,8,1510,0,682,106,1537]
    trans_minor = np.array([
 #         'A','Bb','B',  'C','C#','D','Eb',  'E','F','F#','G','Ab'
         [3282, 1,  2661, 2303, 13, 180,  8,  1510, 682, 0,  1537, 106],
         [2,    0,  17,   3,    0,   0,   0,  0,    0,   0,  0,   0],
         [3892, 17, 2694, 3172, 32, 682,  5,  1000, 183, 0,  423, 8],
         [1639, 4,  4585, 3365, 0,  2494, 30, 2978, 235, 0,  15,  8],
         [9,    0,  35,   0,    15,  27,  0,  6,    0,  0,   0,   0],
         [44,   0,  1176, 3843, 18, 1526, 0,  1637, 488, 2,  117, 11],
         [1,    0,  7,    11,   0,  2,    19, 107,  12,  0,  0,   0],
         [2564, 0,  499,  2766, 11, 3653, 86, 4854, 1658,4,  225, 60],
         [227,  0,  97,   36,   0,  250,  9,  3016, 955, 2,  427, 29],
         [0,    0,  0,    0,    0,  3,    0,  6,    2,   0,  0,   0],
         [1369, 0,  349,  10,   0,  22,   2,  214,  781, 0,  258, 8],
         [51,   0,  7,    36,   0,  6,    0,  67,   55,  3,  6,   27]
         ])

    major_minor = np.array(
        [3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1, 2]
        )
    minor_major = np.array(
        [9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8] 
        )

    trans_major = np.array([
         [3282, 1,  2661, 13, 2303, 180,  8,  1510, 0, 682, 106, 1537],
         [2,    0,  17,   0,  3,    0,    0,  0,    0, 0,   0,   0],
         [3892, 17, 2694, 32, 3172, 682,  5,  1000, 0, 183, 8,   423],
         [9,    0,  35,   15, 0,    27,   0,  6,    0, 0,   0,   0],
         [1639, 4,  4585, 0,  3365, 2494, 30, 2978, 0, 235, 8,   15],
         [44,   0,  1176, 18, 3843, 1526, 0,  1637, 2, 488, 11,  117],
         [1,    0,  7,    0,  11,   2,    19, 107,  0, 12,  0,   0],
         [2564, 0,  499,  11, 2766, 3653, 86, 4854, 4, 1658,60,  225],
         [0,    0,  0,    0,  0,    3,    0,  6,    0, 2,   0,   0],
         [227,  0,  97,   0,  36,   250,  9,  3016, 2, 955, 29,  427],
         [51,   0,  7,    3,  36,   6,    0,  67,   3, 55,  72,  6],
         [1369, 0,  349,  0,  10,   22,   2,  214,  0, 781, 8,   258]
         ])
         
    trans_C_blue = np.array([
#           C     Db  D      Eb    E    F     Gb     G    Ab  A    Bb    B
         [2282, 1,  1,  2661, 213, 2003, 180,  1510, 0, 1,  2837, 1],#C
         [2,    0,  0,  17,   0,  3,    0,    0,    0, 0,   0,    0],#Db
         [2,    0,  0,  17,   0,  3,    0,    0,    0, 0,   0,    0],#D
         [2892, 17, 17, 2094, 32, 3172, 682,  1000, 0, 0,   1423, 0],#Eb
         [9,    0,  0,  35,   15, 0,    27,   6,    0, 0,   0,    0],#E
         [1639, 4,  4,  2585, 0,  2365, 2494, 2078, 0, 0,   815,   0],#F
         [344,   0,  0,  1276, 18, 2443, 1526, 2037, 2, 0,  517,  0],#Gb
         [2564, 0,  0,  1499, 11, 2066, 1853, 2254, 4, 0,   1825, 0],#G
         [0,    0,  0,  0,    0,  0,    3,    6,    0, 0,   0,    0],#Ab
         [1,    0,  0,  0,    0,  0,    0,    0,    0, 0,   0,    0],#A
         [869, 0,  0,   649,  0,  210,  322,  214,  0, 0,   358,  0],#Bb
         [51,   0,  0,  7,    3,  36,   6,    67,   3, 0,   6,    0],#B
        ])
        
    trans_pentatonic = np.array([
         [3282, 0,  2661, 0,  2303, 0,    0,  1510, 0, 1682, 0,   0],
         [0,    0,  0,    0,  0,    0,    0,  0,    0, 0,    0,   0],
         [3892, 0,  2694, 0,  3172, 0,    0,  1000, 0, 1183, 0,   0],
         [0,    0,  0,    0,  0,    0,    0,  0,    0, 0,    0,   0],
         [1639, 0,  4585, 0,  3365, 0,    0,  2978, 0, 235,  0,   0],
         [0,    0,  0,    0,  0,    0,    0,  0,    0, 0,    0,   0],
         [0,    0,  0,    0,  0,    0,    0,  0,    0, 0,    0,   0],
         [2564, 0,  1499,  0,  2766, 0,    0, 4854, 0, 1658, 0,   0],
         [0,    0,  0,    0,  0,    0,    0,  0,    0, 0,    0,   0],
         [227,  0,  97,   0,  136,   0,    0, 3016, 0, 955,  0,   0],
         [0,    0,  0,    0,  0,    0,    0,  0,    0, 0,    0,   0],
         [0   , 0,  0,    0,  0,    0,    0,  0,    0, 0,    0,   0]
        ])
    
    octave = int(note / 12)
    note_norm = note % 12

    if mode == 1:
        note_tran = major_minor[note_norm]
        trans = trans_minor
    elif mode == 0:
        note_tran = note_norm
        trans = trans_major
    elif mode == 2:
        note_tran = note_norm
        trans = trans_C_blue
    else:
        note_tran = note_norm
        trans = trans_pentatonic

    target_sum = int(np.sum(trans[note_tran][:]) * rand.random() + 0.5)

    sum_trans = 0
    next_note = 0
    while(next_note < size and (sum_trans + trans[note_tran][next_note]) < target_sum):
        sum_trans = sum_trans + trans[note_tran][next_note]
        next_note = next_note + 1

    if mode == 1:
        next_note_tran = minor_major[next_note]
    else:
        next_note_tran = next_note
        
    next_note = next_note_tran + octave * 12

#next_note = 60;

    return next_note


#C_markov = pd.Series(C_trans, index=scale)
#print C_markov >3000
#print trans[1][3]
#print Db_sum


